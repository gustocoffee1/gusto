{% extends 'base.html.twig' %}

{% block javascripts %}
    <script>
        var stripe = Stripe('pk_test_RkJAdamwyvNPGEmZ7OtxbV6q00sozo7jsY');


        function registerElements(elements, exampleName) {
            var formClass = '.' + exampleName;
            var example = document.querySelector(formClass);

            var form = example.querySelector('form');
            var resetButton = example.querySelector('a.reset');
            var error = form.querySelector('.error');
            var errorMessage = error.querySelector('.message');

            function enableInputs() {
                Array.prototype.forEach.call(
                    form.querySelectorAll(
                        "input[type='text'], input[type='email'], input[type='tel']"
                    ),
                    function(input) {
                        input.removeAttribute('disabled');
                    }
                );
            }

            function disableInputs() {
                Array.prototype.forEach.call(
                    form.querySelectorAll(
                        "input[type='text'], input[type='email'], input[type='tel']"
                    ),
                    function(input) {
                        input.setAttribute('disabled', 'true');
                    }
                );
            }

            function triggerBrowserValidation() {
                // The only way to trigger HTML5 form validation UI is to fake a user submit
                // event.
                var submit = document.createElement('input');
                submit.type = 'submit';
                submit.style.display = 'none';
                form.appendChild(submit);
                submit.click();
                submit.remove();
            }

            // Listen for errors from each Element, and show error messages in the UI.
            var savedErrors = {};
            elements.forEach(function(element, idx) {
                element.on('change', function(event) {
                    if (event.error) {
                        error.classList.add('visible');
                        savedErrors[idx] = event.error.message;
                        errorMessage.innerText = event.error.message;
                    } else {
                        savedErrors[idx] = null;

                        // Loop over the saved errors and find the first one, if any.
                        var nextError = Object.keys(savedErrors)
                            .sort()
                            .reduce(function(maybeFoundError, key) {
                                return maybeFoundError || savedErrors[key];
                            }, null);

                        if (nextError) {
                            // Now that they've fixed the current error, show another one.
                            errorMessage.innerText = nextError;
                        } else {
                            // The user fixed the last error; no more errors.
                            error.classList.remove('visible');
                        }
                    }
                });
            });

            // Listen on the form's 'submit' handler...
            form.addEventListener('submit', function(e) {
                e.preventDefault();

                // Trigger HTML5 validation UI on the form if any of the inputs fail
                // validation.
                var plainInputsValid = true;
                Array.prototype.forEach.call(form.querySelectorAll('input'), function(
                    input
                ) {
                    if (input.checkValidity && !input.checkValidity()) {
                        plainInputsValid = false;
                        return;
                    }
                });
                if (!plainInputsValid) {
                    triggerBrowserValidation();
                    return;
                }

                // Show a loading screen...
                example.classList.add('submitting');

                // Disable all inputs.
                disableInputs();

                // Gather additional customer data we may have collected in our form.
                var name = form.querySelector('#' + exampleName + '-name');
                var address1 = form.querySelector('#' + exampleName + '-address');
                var city = form.querySelector('#' + exampleName + '-city');
                var state = form.querySelector('#' + exampleName + '-state');
                var zip = form.querySelector('#' + exampleName + '-zip');
                var additionalData = {
                    name: name ? name.value : undefined,
                    address_line1: address1 ? address1.value : undefined,
                    address_city: city ? city.value : undefined,
                    address_state: state ? state.value : undefined,
                    address_zip: zip ? zip.value : undefined,
                };

                // Use Stripe.js to create a token. We only need to pass in one Element
                // from the Element group in order to create a token. We can also pass
                // in the additional customer data we collected in our form.
                stripe.createToken(elements[0], additionalData).then(function(result) {
                    // Stop loading!
                    example.classList.remove('submitting');

                    if (result.token) {
                        // If we received a token, show the token ID.
                        example.classList.add('submitted');

                        // Appel la fonction de la route payment pour insérer en base de donnée les données
                        $.ajax({
                            type: "POST",
                            url: "{{ path('payment') }}",
                            dataType: 'json',

                            success: function (data) {
                                console.log(data);
                                // $('#test').text(data.startDate);

                            },
                            error: function (error) {
                                console.log(error);
                            }
                        });

                    } else {
                        // Otherwise, un-disable inputs.
                        enableInputs();
                    }
                });
            });

            // resetButton.addEventListener('click', function(e) {
            //     e.preventDefault();
            //     // Resetting the form (instead of setting the value to `''` for each input)
            //     // helps us clear webkit autofill styles.
            //     form.reset();
            //
            //     // Clear each Element.
            //     elements.forEach(function(element) {
            //         element.clear();
            //     });
            //
            //     // Reset error state as well.
            //     error.classList.remove('visible');
            //
            //     // Resetting the form does not un-disable inputs, so we need to do it separately:
            //     enableInputs();
            //     example.classList.remove('submitted');
            // });
        }

        var elements = stripe.elements();


        var card = elements.create("card", {
            iconStyle: "solid",
            style: {
                base: {
                    iconColor: "#fff",
                    color: "#fff",
                    fontWeight: 400,
                    fontFamily: "Helvetica Neue, Helvetica, Arial, sans-serif",
                    fontSize: "16px",
                    fontSmoothing: "antialiased",

                    "::placeholder": {
                        color: "#9F9486"
                    },
                    ":-webkit-autofill": {
                        color: "#fce883"
                    }
                },
                invalid: {
                    iconColor: "#FFC7EE",
                    color: "#FFC7EE"
                }
            }
        });
        card.mount("#example5-card");


        var paymentRequest = stripe.paymentRequest({
            country: "FR",
            currency: "eur",
            total: {
                amount: 250,
                label: "Total"
            },
        });
        paymentRequest.on("token", function(result) {
            var example = document.querySelector(".example5");
            example.querySelector(".token").innerText = result.token.id;
            example.classList.add("submitted");
            result.complete("success");
        });

        var paymentRequestElement = elements.create("paymentRequestButton", {
            paymentRequest: paymentRequest,
            style: {
                paymentRequestButton: {
                    theme: "light"
                }
            }
        });

        paymentRequest.canMakePayment().then(function(result) {
            if (result) {
                document.querySelector(".example5 .card-only").style.display = "none";
                document.querySelector(
                    ".example5 .payment-request-available"
                ).style.display =
                    "block";
                paymentRequestElement.mount("#example5-paymentRequest");
            }
        });

        registerElements([card], "example5");



    </script>
{% endblock %}



{% block body %}
    <section class="py-6">
        <main class="mt-2 mb-5 pt-1">
            <div class="container">
                <div class="row">
                    <div class="col-md-3">&nbsp;</div>
                    <div class="col-md-6">

                        <div class="cell example example5" id="example-5">
                            <form action="{{ path('payment') }}" id="payment-form" >
                                <div id="example5-paymentRequest">
                                    <!--Stripe paymentRequestButton Element inserted here-->
                                </div>
                                <fieldset>
                                    <legend class="card-only" data-tid="elements_examples.form.pay_with_card">Paiement par carte bancaire</legend>

                                    <div class="row">
                                        <div class="field">
                                            <label for="example5-card" data-tid="elements_examples.form.card_label">Carte bancaire</label>
                                            <div id="example5-card" class="input"></div>
                                        </div>
                                    </div>
                                    <button type="submit" data-tid="elements_examples.form.pay_button">Payer {{ app.session.get('price') +  app.session.get('total') }} €</button>

                                </fieldset>
                                <div class="error" role="alert">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="17" height="17" viewBox="0 0 17 17">
                                        <path class="base" fill="#000" d="M8.5,17 C3.80557963,17 0,13.1944204 0,8.5 C0,3.80557963 3.80557963,0 8.5,0 C13.1944204,0 17,3.80557963 17,8.5 C17,13.1944204 13.1944204,17 8.5,17 Z"></path>
                                        <path class="glyph" fill="#FFF" d="M8.5,7.29791847 L6.12604076,4.92395924 C5.79409512,4.59201359 5.25590488,4.59201359 4.92395924,4.92395924 C4.59201359,5.25590488 4.59201359,5.79409512 4.92395924,6.12604076 L7.29791847,8.5 L4.92395924,10.8739592 C4.59201359,11.2059049 4.59201359,11.7440951 4.92395924,12.0760408 C5.25590488,12.4079864 5.79409512,12.4079864 6.12604076,12.0760408 L8.5,9.70208153 L10.8739592,12.0760408 C11.2059049,12.4079864 11.7440951,12.4079864 12.0760408,12.0760408 C12.4079864,11.7440951 12.4079864,11.2059049 12.0760408,10.8739592 L9.70208153,8.5 L12.0760408,6.12604076 C12.4079864,5.79409512 12.4079864,5.25590488 12.0760408,4.92395924 C11.7440951,4.59201359 11.2059049,4.59201359 10.8739592,4.92395924 L8.5,7.29791847 L8.5,7.29791847 Z"></path>
                                    </svg>
                                    <span class="message"></span>
                                </div>
                            </form>
                            <div class="success">
                                <div id="icon-valid">
                                    <svg width="84px" height="84px" viewBox="0 0 84 84" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                                        <circle class="border" cx="42" cy="42" r="40" stroke-linecap="round" stroke-width="4" stroke="#000" fill="none"></circle>
                                        <path class="checkmark" stroke-linecap="round" stroke-linejoin="round" d="M23.375 42.5488281 36.8840688 56.0578969 64.891932 28.0500338" stroke-width="4" stroke="#000" fill="none"></path>
                                    </svg>
                                </div>
                                <h3 class="title" data-tid="elements_examples.success.title">Paiement réussi</h3>
                                <a href="{{ path('all_bookings') }}" id="btn-info" class="btn btn-connexion">Voir ma réservation</a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </main>
    </section>

{% endblock %}

